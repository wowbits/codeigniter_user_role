<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . '/libraries/REST_Controller.php';


/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Api extends REST_Controller
{
    private $swahili;
    private $arabic;
    function __construct()
    {
        // Construct the parent class
        parent::__construct();
      
     
    }

    public function auto_get(){
  
  $response = array(
                "status" => "success",
                "response" => "ss",
                "msg" => null,
                "warn" => null,
                "loggedIn" => false,
            );
    $this->set_response($response, REST_Controller::HTTP_OK);

    }




    public function audio_get($reciter = null, $ayah = null)
    {
        $file_path = null;

        if(!$ayah)
            $ayah = 1;
        if($ayah) {
            $ayah = htmlspecialchars_decode($ayah);
        }
        if ($reciter && $ayah)
        {
            $file_path = 'files/'.$reciter.'/'.$ayah;
        }
        if (file_exists($file_path))
        {
            redirect(base_url($file_path));
        } else
            return false;
    }

    public function audio_api_post()
    {
        $id = $this->post('id');
        $sura = $this->post('sura');
        $verse = $this->post('aya');

        if (strlen($id) == 0)
            $id = "maahir_al_muayqaliy";

        if ($sura === NULL) {
            $sura = 1;
        }
        if ($verse === NULL) {
            $sura = 1;
        }


        $audiofile = null;
        switch (strlen($sura)) {
            case 1:
                switch (strlen($verse)) {
                    case 1:
                        $audiofile = '00' . $sura . '00' . $verse . '.mp3';
                        break;
                    case 2:
                        $audiofile = '00' . $sura . '0' . $verse . '.mp3';
                        break;
                    default:
                        $audiofile = '00' . $sura . $verse . '.mp3';
                        break;
                }
                break;
            case 2:
                switch (strlen($verse)) {
                    case 1:
                        $audiofile = '0' . $sura . '00' . $verse . '.mp3';
                        break;
                    case 2:
                        $audiofile = '0' . $sura . '0' . $verse . '.mp3';
                        break;
                    default:
                        $audiofile = '0' . $sura . $verse . '.mp3';
                        break;
                }
                break;
            default:
                switch (strlen($verse)) {
                    case 1:
                        $audiofile = $sura . '00' . $verse . '.mp3';
                        break;
                    case 2:
                        $audiofile = $sura . '0' . $verse . '.mp3';
                        break;
                    default:
                        $audiofile = $sura . $verse . '.mp3';
                        break;
                }
                break;
        }

        if (!empty($audiofile) && strlen($audiofile) >3) {
            //create a file link
            $file_path = base_url('/files/'.$id.'/'.$audiofile);
        }

        if (!empty($file_path) && !empty($audiofile)) {
            $data = array('mp3' => $file_path, 'title' => "Audio Files");

            $response = array(
                "status" => "success",
                "response" => $data,
                "msg" => null,
                "warn" => null,
                "loggedIn" => false,
            );
            $this->set_response($response, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $response = array(
                "status" => "success",
                "response" => false,
                "warn" => "audio could not be found",
                "msg" => null,
                "loggedIn" => false,
            );
            $this->set_response([
                $response
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

}
